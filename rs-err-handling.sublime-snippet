<snippet>
    <content><![CDATA[
--- thiserror
use std::{num::ParseIntError, str::Utf8Error};
use thiserror::Error;

#[derive(Error, Debug)]
enum SystemError {
    #[error("Couldn't send: {0}")]
    SendError(String),
    #[error("Couldn't parse into a str: {0}")]
    StringFromUtf8Error(#[from] Utf8Error),
    #[error("Couldn't turn into an i32: {0}")]
    ParseI32Error(#[from] ParseIntError),
    #[error("Wrong color: Red {0} Green {1} Blue {2}")]
    ColorError(u8, u8, u8),
    #[error("Something happened")]
    OtherError,
}

fn parse_then_send(input: &[u8]) -> Result<(), SystemError> {
    let some_str = std::str::from_utf8(input)?; 
    let number = some_str.parse::<i32>()?;
    send_number(number)?;
    Ok(())
}

fn send_number(number: i32) -> Result<(), SystemError> {
    match number {
        num if num == 500 => Err(SystemError::OtherError), 
            num if num > 1_000_000 => Err(SystemError::SendError(format!(
            "{num} is too large, can't send!"
        ))),
        _ => {
            println!("Number sent!");
            Ok(())
        }
    }
}

fn main() {
    println!("{}", parse_then_send(b"nine").unwrap_err());
    println!("{}", parse_then_send(&[8, 9, 0, 200]).unwrap_err());
    println!("{}", parse_then_send(b"109080098").unwrap_err());
    println!("{}", SystemError::ColorError(8, 10, 200));
    parse_then_send(b"10098").unwrap();
}


---error handling and serde

use std::io;
use serde::{Deserialize, Serialize};
use thiserror::Error;
mod mod1;
fn main() {

    let x = test();
    match x {
        Ok(_) => {}
        Err(DataStoreError::JSONError(e)) => {println!("JSONError: {}", e)}
        Err(DataStoreError::Redaction(e)) => {println!("RedactionError: {}", e)}
        _ => {}
    }

}
fn test() -> Result<(), DataStoreError> {
    // http get httpbin.org


    println!("Hello, world!");
    let my = MyStruct::new("John".to_string(), 32);
    println!("my: {:?}", my);
    let json = serde_json::to_string(&my)?;
    let s = serde_json::from_str::<MyStruct>(&json)?;
    println!("s: {:?}", s);
    if s.name != "John2" {
        return Err(DataStoreError::Redaction("name".to_string()));
    }
    Ok(())

}

#[derive(Debug, Serialize, Deserialize)]
struct MyStruct {
    name: String,
    age: u8,
}

impl MyStruct {
    fn new(name: String, age: u8) -> Self {
        Self {
            name,
            age,
        }
    }
}

#[derive(Error, Debug)]
pub enum DataStoreError {

    #[error("data store disconnected")]
    Disconnect(#[from] io::Error),
    #[error("malformed json")]
    JSONError(#[from] serde_json::Error),

    #[error("the data for key `{0}` is not available")]
    Redaction(String),

    #[error("invalid header (expected {expected:?}, found {found:?})")]
    InvalidHeader {
        expected: String,
        found: String,
    },

    #[error("unknown data store error")]
    Unknown,
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>rserrhandling</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.rust</scope>
</snippet>