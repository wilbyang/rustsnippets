<snippet>
    <content><![CDATA[

--- 
https://github.com/brndnmtthws/code-like-a-pro-in-rust-book/c08/async-observer/
use std::{future::Future, pin::Pin};

pub trait Observable {
    type Observer;
    fn update<'a>(
        &'a self,
    ) -> Pin<Box<dyn Future<Output = ()> + 'a + Send>>;
    fn attach(&mut self, observer: Self::Observer);
    fn detach(&mut self, observer: Self::Observer);
}



pub trait Observer: Send + Sync {
    type Subject;
    type Output;
    fn observe<'a>(
        &'a self,
        subject: &'a Self::Subject,
    ) -> Pin<Box<dyn Future<Output = Self::Output> + 'a + Send>>;
}

struct MyObserver {
    name: String,
}

impl MyObserver {
    fn new(name: &str) -> Arc<Self> {
        Arc::new(Self { name: name.into() })
    }
}
impl Observer for MyObserver {
    type Subject = Subject;
    type Output = ();
    fn observe<'a>(
        &'a self,
        subject: &'a Self::Subject,
    ) -> Pin<Box<dyn Future<Output = Self::Output> + 'a + Send>> {
        Box::pin(async {
            println!(
                "observed subject with state={:?} in {}",
                subject.state(),
                self.name
            );
        })
    }
}


use std::{
    future::Future,
    pin::Pin,
    sync::{Arc, Weak},
};

use crate::{observable::Observable, observer::Observer};

pub struct Subject {
    observers: Vec<Weak<dyn Observer<Subject = Self, Output = ()>>>,
    state: String,
}

impl Subject {
    pub fn new(state: &str) -> Self {
        Self {
            observers: vec![],
            state: state.into(),
        }
    }

    pub fn state(&self) -> &str {
        self.state.as_ref()
    }
}

impl Observable for Subject {
    type Observer = Arc<dyn Observer<Subject = Self, Output = ()>>;
    fn update<'a>(
        &'a self,
    ) -> Pin<Box<dyn Future<Output = ()> + 'a + Send>> {
        let observers: Vec<_> =
            self.observers.iter().flat_map(|o| o.upgrade()).collect();

        Box::pin(async move {
            futures::future::join_all(
                observers.iter().map(|o| o.observe(self)),
            )
            .await;
        })
    }
    fn attach(&mut self, observer: Self::Observer) {
        self.observers.push(Arc::downgrade(&observer));
    }
    fn detach(&mut self, observer: Self::Observer) {
        self.observers
            .retain(|f| !f.ptr_eq(&Arc::downgrade(&observer)));
    }
}

#[tokio::main]
async fn main() {
    let mut subject = Subject::new("some subject state");

    let observer1 = MyObserver::new("observer1");
    let observer2 = MyObserver::new("observer2");

    subject.attach(observer1.clone());
    subject.attach(observer2.clone());

    // ... do something here ...

    subject.update().await;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>rstrait</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.rust</scope>
</snippet>